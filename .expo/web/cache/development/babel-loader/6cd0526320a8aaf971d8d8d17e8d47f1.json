{"ast":null,"code":"import _toArray from \"@babel/runtime/helpers/toArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { StackedBarChart } from 'react-native-chart-kit';\nimport colors from \"../../config/colors\";\nimport NoDataFound from \"../NoDataFound\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar screenWidth = Dimensions.get('window').width;\nvar screenHeigth = Dimensions.get('window').height;\nexport default function StackedBarsChart(_ref) {\n  var dataArray = _ref.dataArray,\n      stackedNumber = _ref.stackedNumber,\n      legendArray = _ref.legendArray,\n      colorsArray = _ref.colorsArray,\n      size = _ref.size;\n  var dataArraySliced = dataArray == null ? void 0 : dataArray.slice(1);\n  var dataFinal = [];\n\n  var _dataArraySliced = _toArray(dataArraySliced),\n      arr = _dataArraySliced.slice(0);\n\n  while (arr.length) {\n    dataFinal.push(arr.splice(0, stackedNumber));\n  }\n\n  var data = {\n    legend: legendArray,\n    data: dataFinal.length > 12 && size === 'large' ? dataFinal.slice(dataFinal.length - 12) : dataFinal.length > 10 && size !== 'large' ? dataFinal.slice(dataFinal.length - 10) : dataFinal,\n    barColors: colorsArray\n  };\n  var chartConfig = {\n    backgroundGradientFrom: 'white',\n    backgroundGradientTo: 'white',\n    color: function color() {\n      return 'gray';\n    },\n    useShadowColorFromDataset: false,\n    labelColor: function labelColor() {\n      return 'black';\n    },\n    barPercentage: size == 'large' ? 0.55 : 0.7,\n    propsForBackgroundLines: {\n      strokeOpacity: size == 'large' ? 0.1 : 0,\n      strokeDasharray: [-1000000000000, 1000000000000000]\n    },\n    decimalPlaces: 0,\n    labelColor: function labelColor() {\n      return \"black\";\n    },\n    propsForLabels: {\n      fontSize: 7,\n      fontWeight: 'bold',\n      alignSelf: 'center'\n    }\n  };\n  return dataArray[0] === 0 && dataArray.length === 1 ? _jsx(View, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(NoDataFound, {\n      visible: true\n    })\n  }) : _jsx(View, {\n    style: styles.container,\n    children: _jsx(StackedBarChart, {\n      style: {\n        paddingRight: size === 'large' ? '1%' : '23%',\n        padding: size === 'large' ? 1 : 15,\n        alignSelf: 'center',\n        justifyContent: 'center'\n      },\n      data: data,\n      width: size == 'large' ? screenWidth * 1.15 : screenWidth,\n      height: size == 'large' ? screenHeigth * 0.3 : screenHeigth * 0.25,\n      chartConfig: chartConfig,\n      withVerticalLabels: size == 'large' ? false : false,\n      withHorizontalLabels: size == 'large' ? true : false,\n      hideLegend: size == 'large' ? false : true,\n      fromZero: true,\n      segments: 4\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.white\n  }\n});","map":{"version":3,"sources":["C:/Users/amine/OneDrive/Desktop/PFE/Examples/designTypes/app/components/charts/StackedBarsChart.js"],"names":["StackedBarChart","colors","NoDataFound","screenWidth","Dimensions","get","width","screenHeigth","height","StackedBarsChart","dataArray","stackedNumber","legendArray","colorsArray","size","dataArraySliced","slice","dataFinal","arr","length","push","splice","data","legend","barColors","chartConfig","backgroundGradientFrom","backgroundGradientTo","color","useShadowColorFromDataset","labelColor","barPercentage","propsForBackgroundLines","strokeOpacity","strokeDasharray","decimalPlaces","propsForLabels","fontSize","fontWeight","alignSelf","flex","styles","container","paddingRight","padding","justifyContent","StyleSheet","create","backgroundColor","white"],"mappings":"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","sourcesContent":["import { StyleSheet, View, Dimensions, Text } from 'react-native';\r\n\r\nimport { StackedBarChart } from 'react-native-chart-kit';\r\nimport colors from '../../config/colors';\r\nimport NoDataFound from '../NoDataFound';\r\n\r\nlet screenWidth = Dimensions.get('window').width;\r\nlet screenHeigth = Dimensions.get('window').height;\r\n\r\nexport default function StackedBarsChart({\r\n  dataArray,\r\n  stackedNumber,\r\n  legendArray,\r\n  colorsArray,\r\n  size,\r\n}) {\r\n  const dataArraySliced = dataArray?.slice(1);\r\n  let dataFinal = [];\r\n  let [...arr] = dataArraySliced;\r\n  while (arr.length) {\r\n    dataFinal.push(arr.splice(0, stackedNumber));\r\n  }\r\n\r\n  const data = {\r\n    legend: legendArray,\r\n    data:\r\n      dataFinal.length > 12 && size === 'large'\r\n        ? dataFinal.slice(dataFinal.length - 12)\r\n        : dataFinal.length > 10 && size !== 'large'\r\n        ? dataFinal.slice(dataFinal.length - 10)\r\n        : dataFinal,\r\n    barColors: colorsArray,\r\n  };\r\n  const chartConfig = {\r\n    backgroundGradientFrom: 'white',\r\n    backgroundGradientTo: 'white',\r\n    color: () => 'gray',\r\n    useShadowColorFromDataset: false,\r\n    labelColor: () => 'black',\r\n\r\n    barPercentage: size == 'large' ? 0.55 : 0.7,\r\n    propsForBackgroundLines: {\r\n      strokeOpacity: size == 'large' ? 0.1 : 0,\r\n      strokeDasharray: [-1000000000000, 1000000000000000],\r\n    },\r\n    decimalPlaces: 0,\r\n    labelColor: () => `black`,\r\n    propsForLabels: {\r\n      fontSize: 7,\r\n      fontWeight: 'bold',\r\n      alignSelf: 'center',\r\n    },\r\n  };\r\n\r\n  return dataArray[0] === 0 && dataArray.length === 1 ? (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n      }}\r\n    >\r\n      <NoDataFound visible={true} />\r\n    </View>\r\n  ) : (\r\n    <View style={styles.container}>\r\n      <StackedBarChart\r\n        style={{\r\n          paddingRight: size === 'large' ? '1%' : '23%',\r\n          padding: size === 'large' ? 1 : 15,\r\n          alignSelf: 'center',\r\n          justifyContent: 'center',\r\n        }}\r\n        data={data}\r\n        width={size == 'large' ? screenWidth * 1.15 : screenWidth}\r\n        height={size == 'large' ? screenHeigth * 0.3 : screenHeigth * 0.25}\r\n        chartConfig={chartConfig}\r\n        withVerticalLabels={size == 'large' ? false : false}\r\n        withHorizontalLabels={size == 'large' ? true : false}\r\n        hideLegend={size == 'large' ? false : true}\r\n        fromZero={true}\r\n        segments={4}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: colors.white,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}
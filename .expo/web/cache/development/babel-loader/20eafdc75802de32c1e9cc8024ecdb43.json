{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useState, useRef, forwardRef, useImperativeHandle } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport styles from \"./styles\";\nimport { findIndexInArr } from \"./helpers/findIndexInArr\";\nimport { calculateDropdownHeight } from \"./helpers/calculateDropdownHeight\";\nimport { isExist } from \"./helpers/isExist\";\nimport Input from \"./components/Input\";\nimport { useKeyboardHeight } from \"./hooks/useKeyboardHeight\";\nimport { deepSearchInArr } from \"./helpers/deepSearchInArr\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    height = _Dimensions$get.height;\n\nvar SelectDropdown = function SelectDropdown(_ref, ref) {\n  var data = _ref.data,\n      onSelect = _ref.onSelect,\n      defaultButtonText = _ref.defaultButtonText,\n      buttonTextAfterSelection = _ref.buttonTextAfterSelection,\n      rowTextForSelection = _ref.rowTextForSelection,\n      defaultValue = _ref.defaultValue,\n      defaultValueByIndex = _ref.defaultValueByIndex,\n      disabled = _ref.disabled,\n      disableAutoScroll = _ref.disableAutoScroll,\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur,\n      buttonStyle = _ref.buttonStyle,\n      buttonTextStyle = _ref.buttonTextStyle,\n      renderCustomizedButtonChild = _ref.renderCustomizedButtonChild,\n      renderDropdownIcon = _ref.renderDropdownIcon,\n      dropdownIconPosition = _ref.dropdownIconPosition,\n      statusBarTranslucent = _ref.statusBarTranslucent,\n      dropdownStyle = _ref.dropdownStyle,\n      dropdownOverlayColor = _ref.dropdownOverlayColor,\n      rowStyle = _ref.rowStyle,\n      rowTextStyle = _ref.rowTextStyle,\n      selectedRowStyle = _ref.selectedRowStyle,\n      selectedRowTextStyle = _ref.selectedRowTextStyle,\n      renderCustomizedRowChild = _ref.renderCustomizedRowChild,\n      search = _ref.search,\n      searchInputStyle = _ref.searchInputStyle,\n      searchInputTxtColor = _ref.searchInputTxtColor,\n      searchPlaceHolder = _ref.searchPlaceHolder,\n      searchPlaceHolderColor = _ref.searchPlaceHolderColor,\n      renderSearchInputLeftIcon = _ref.renderSearchInputLeftIcon,\n      renderSearchInputRightIcon = _ref.renderSearchInputRightIcon;\n  useImperativeHandle(ref, function () {\n    return {\n      reset: function reset() {\n        _reset();\n      },\n      openDropdown: function openDropdown() {\n        _openDropdown();\n      },\n      closeDropdown: function closeDropdown() {\n        _closeDropdown();\n      }\n    };\n  });\n  var DropdownButton = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVisible = _useState2[0],\n      setIsVisible = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      buttonLayout = _useState4[0],\n      setButtonLayout = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dropdownPX = _useState6[0],\n      setDropdownPX = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dropdownPY = _useState8[0],\n      setDropdownPY = _useState8[1];\n\n  var _useState9 = useState(function () {\n    return calculateDropdownHeight(dropdownStyle, rowStyle, (data == null ? void 0 : data.length) || 0);\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dropdownHEIGHT = _useState10[0],\n      setDropdownHEIGHT = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      dropdownWIDTH = _useState12[0],\n      setDropdownWIDTH = _useState12[1];\n\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      selectedItem = _useState14[0],\n      setSelectedItem = _useState14[1];\n\n  var _useState15 = useState(-1),\n      _useState16 = _slicedToArray(_useState15, 2),\n      selectedIndex = _useState16[0],\n      setSelectedIndex = _useState16[1];\n\n  var dropDownFlatlistRef = useRef(null);\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      searchTxt = _useState18[0],\n      setSearchTxt = _useState18[1];\n\n  var keyboardHeight = useKeyboardHeight();\n  var remainigHeightAvoidKeyboard = height - keyboardHeight;\n  var safeDropdownViewUnderKeyboard = rowStyle && rowStyle.height ? rowStyle.height * 3 : 50 * 3;\n  useEffect(function () {\n    if (!data || data.length == 0) {\n      _reset();\n    }\n  }, [data]);\n  useEffect(function () {\n    if (isExist(defaultValueByIndex)) {\n      if (data && isExist(data[defaultValueByIndex])) {\n        setDefault(defaultValueByIndex);\n      }\n    }\n  }, [defaultValueByIndex]);\n  useEffect(function () {\n    if (isExist(defaultValue)) {\n      if (data && findIndexInArr(defaultValue, data) >= 0) {\n        setDefault(findIndexInArr(defaultValue, data));\n      }\n    }\n  }, [defaultValue]);\n  useEffect(function () {\n    setDropdownHEIGHT(calculateDropdownHeight(dropdownStyle, rowStyle, (data == null ? void 0 : data.length) || 0));\n  }, [dropdownStyle, rowStyle, data]);\n\n  var _openDropdown = function _openDropdown() {\n    DropdownButton.current.measure(function (fx, fy, w, h, px, py) {\n      setButtonLayout({\n        w: w,\n        h: h,\n        px: px,\n        py: py\n      });\n\n      if (height - 18 < py + h + dropdownHEIGHT) {\n        setDropdownPX(px);\n        setDropdownPY(py - 2 - dropdownHEIGHT);\n      } else {\n        setDropdownPX(px);\n        setDropdownPY(py + h + 2);\n      }\n\n      setDropdownWIDTH((dropdownStyle == null ? void 0 : dropdownStyle.width) || w);\n      setIsVisible(true);\n      onFocus && onFocus();\n    });\n  };\n\n  var _closeDropdown = function _closeDropdown() {\n    setIsVisible(false);\n    setSearchTxt('');\n    onBlur && onBlur();\n  };\n\n  var _reset = function _reset() {\n    setSelectedItem(null);\n    setSelectedIndex(-1);\n    setSearchTxt('');\n  };\n\n  var setDefault = function setDefault(index) {\n    setSelectedItem(data[index]);\n    setSelectedIndex(index);\n  };\n\n  var getItemLayout = function getItemLayout(data, index) {\n    return {\n      index: index,\n      length: (data == null ? void 0 : data.length) || 0,\n      offset: rowStyle && rowStyle.height ? rowStyle.height * index : 50 * index\n    };\n  };\n\n  var onLayout = function onLayout() {\n    if (disableAutoScroll) {\n      return;\n    }\n\n    if (selectedIndex >= 3 && dropDownFlatlistRef) {\n      dropDownFlatlistRef.current.scrollToOffset({\n        offset: rowStyle && rowStyle.height ? rowStyle.height * selectedIndex : 50 * selectedIndex,\n        animated: true\n      });\n    }\n  };\n\n  var onSelectItem = function onSelectItem(item, index) {\n    _closeDropdown();\n\n    onSelect(item, index);\n    setSelectedItem(item);\n    setSelectedIndex(index);\n  };\n\n  var renderSearchView = function renderSearchView() {\n    return search && _jsx(View, {\n      style: _objectSpread(_objectSpread({}, styles.searchViewStyle), {\n        width: buttonLayout.w\n      }),\n      children: _jsx(Input, {\n        value: searchTxt,\n        valueColor: searchInputTxtColor,\n        placeholder: searchPlaceHolder,\n        placeholderTextColor: searchPlaceHolderColor,\n        onChangeText: setSearchTxt,\n        inputStyle: searchInputStyle,\n        renderLeft: renderSearchInputLeftIcon,\n        renderRight: renderSearchInputRightIcon\n      })\n    });\n  };\n\n  var renderFlatlistItem = function renderFlatlistItem(_ref2) {\n    var item = _ref2.item,\n        index = _ref2.index;\n    return item ? _jsx(TouchableOpacity, {\n      activeOpacity: 0.8,\n      style: _objectSpread(_objectSpread(_objectSpread({}, styles.dropdownRow), rowStyle), index == selectedIndex && selectedRowStyle),\n      onPress: function onPress() {\n        return onSelectItem(item, index);\n      },\n      children: renderCustomizedRowChild ? _jsx(View, {\n        style: styles.dropdownCustomizedRowParent,\n        children: renderCustomizedRowChild(item, index)\n      }) : _jsx(Text, {\n        numberOfLines: 1,\n        allowFontScaling: false,\n        style: _objectSpread(_objectSpread(_objectSpread({}, styles.dropdownRowText), rowTextStyle), index == selectedIndex && selectedRowTextStyle),\n        children: rowTextForSelection ? rowTextForSelection(item, index) : item.toString()\n      })\n    }) : _jsx(_Fragment, {});\n  };\n\n  var renderDropdown = function renderDropdown() {\n    return isVisible && _jsxs(Modal, {\n      supportedOrientations: ['portrait', 'landscape'],\n      animationType: \"none\",\n      transparent: true,\n      statusBarTranslucent: statusBarTranslucent || false,\n      visible: isVisible,\n      children: [_jsx(TouchableOpacity, {\n        activeOpacity: 1,\n        onPress: function onPress() {\n          return _closeDropdown();\n        },\n        style: _objectSpread(_objectSpread({}, styles.dropdownOverlay), dropdownOverlayColor && {\n          backgroundColor: dropdownOverlayColor\n        })\n      }), _jsx(View, {\n        style: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, styles.dropdownOverlayView), styles.shadow), dropdownStyle), {\n          position: 'absolute',\n          top: remainigHeightAvoidKeyboard < dropdownPY + safeDropdownViewUnderKeyboard ? remainigHeightAvoidKeyboard - safeDropdownViewUnderKeyboard : dropdownPY,\n          height: dropdownHEIGHT,\n          width: dropdownWIDTH,\n          borderTopWidth: 0,\n          overflow: 'hidden'\n        }), I18nManager.isRTL ? {\n          right: (dropdownStyle == null ? void 0 : dropdownStyle.right) || dropdownPX\n        } : {\n          left: (dropdownStyle == null ? void 0 : dropdownStyle.left) || dropdownPX\n        }),\n        children: !data || data.length == 0 ? _jsx(View, {\n          style: styles.dropdownActivityIndicatorView,\n          children: _jsx(ActivityIndicator, {\n            size: \"small\",\n            color: '#999999'\n          })\n        }) : _jsx(FlatList, {\n          data: searchTxt ? deepSearchInArr(searchTxt, data) : data,\n          keyExtractor: function keyExtractor(item, index) {\n            return index.toString();\n          },\n          ref: function ref(_ref3) {\n            return dropDownFlatlistRef.current = _ref3;\n          },\n          renderItem: renderFlatlistItem,\n          getItemLayout: getItemLayout,\n          onLayout: onLayout,\n          ListHeaderComponent: renderSearchView(),\n          stickyHeaderIndices: search && [0]\n        })\n      })]\n    });\n  };\n\n  return _jsxs(TouchableOpacity, {\n    ref: DropdownButton,\n    disabled: disabled,\n    activeOpacity: 0.8,\n    style: _objectSpread(_objectSpread(_objectSpread({}, styles.dropdownButton), dropdownIconPosition == 'left' ? {\n      flexDirection: 'row'\n    } : {\n      flexDirection: 'row-reverse'\n    }), buttonStyle),\n    onPress: _openDropdown,\n    children: [renderDropdown(), renderDropdownIcon && renderDropdownIcon(isVisible), renderCustomizedButtonChild ? _jsx(View, {\n      style: styles.dropdownCustomizedButtonParent,\n      children: renderCustomizedButtonChild(selectedItem, selectedIndex)\n    }) : _jsx(Text, {\n      numberOfLines: 1,\n      allowFontScaling: false,\n      style: _objectSpread(_objectSpread({}, styles.dropdownButtonText), buttonTextStyle),\n      children: isExist(selectedItem) ? buttonTextAfterSelection ? buttonTextAfterSelection(selectedItem, selectedIndex) : selectedItem.toString() : defaultButtonText || 'Select an option.'\n    })]\n  });\n};\n\nexport default forwardRef(function (props, ref) {\n  return SelectDropdown(props, ref);\n});","map":{"version":3,"sources":["C:/Users/amine/OneDrive/Desktop/PFE/Examples/designTypes/node_modules/react-native-select-dropdown/src/SelectDropdown.js"],"names":["React","useEffect","useState","useRef","forwardRef","useImperativeHandle","styles","findIndexInArr","calculateDropdownHeight","isExist","Input","useKeyboardHeight","deepSearchInArr","Dimensions","get","height","SelectDropdown","ref","data","onSelect","defaultButtonText","buttonTextAfterSelection","rowTextForSelection","defaultValue","defaultValueByIndex","disabled","disableAutoScroll","onFocus","onBlur","buttonStyle","buttonTextStyle","renderCustomizedButtonChild","renderDropdownIcon","dropdownIconPosition","statusBarTranslucent","dropdownStyle","dropdownOverlayColor","rowStyle","rowTextStyle","selectedRowStyle","selectedRowTextStyle","renderCustomizedRowChild","search","searchInputStyle","searchInputTxtColor","searchPlaceHolder","searchPlaceHolderColor","renderSearchInputLeftIcon","renderSearchInputRightIcon","reset","openDropdown","closeDropdown","DropdownButton","isVisible","setIsVisible","buttonLayout","setButtonLayout","dropdownPX","setDropdownPX","dropdownPY","setDropdownPY","length","dropdownHEIGHT","setDropdownHEIGHT","dropdownWIDTH","setDropdownWIDTH","selectedItem","setSelectedItem","selectedIndex","setSelectedIndex","dropDownFlatlistRef","searchTxt","setSearchTxt","keyboardHeight","remainigHeightAvoidKeyboard","safeDropdownViewUnderKeyboard","setDefault","current","measure","fx","fy","w","h","px","py","width","index","getItemLayout","offset","onLayout","scrollToOffset","animated","onSelectItem","item","renderSearchView","searchViewStyle","renderFlatlistItem","dropdownRow","dropdownCustomizedRowParent","dropdownRowText","toString","renderDropdown","dropdownOverlay","backgroundColor","dropdownOverlayView","shadow","position","top","borderTopWidth","overflow","I18nManager","isRTL","right","left","dropdownActivityIndicatorView","dropdownButton","flexDirection","dropdownCustomizedButtonParent","dropdownButtonText","props"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef, forwardRef, useImperativeHandle} from 'react';\nimport {View, Text, TouchableOpacity, FlatList, Dimensions, ActivityIndicator, Modal, I18nManager} from 'react-native';\nimport styles from './styles';\nimport {findIndexInArr} from './helpers/findIndexInArr';\nimport {calculateDropdownHeight} from './helpers/calculateDropdownHeight';\nimport {isExist} from './helpers/isExist';\nimport Input from './components/Input';\nimport {useKeyboardHeight} from './hooks/useKeyboardHeight';\nimport {deepSearchInArr} from './helpers/deepSearchInArr';\nconst {height} = Dimensions.get('window');\n\nconst SelectDropdown = (\n  {\n    data /* array */,\n    onSelect /* function  */,\n    defaultButtonText /* String */,\n    buttonTextAfterSelection /* function */,\n    rowTextForSelection /* function */,\n    defaultValue /* any */,\n    defaultValueByIndex /* integer */,\n    disabled /* boolean */,\n    disableAutoScroll /* boolean */,\n    onFocus /* function  */,\n    onBlur /* function  */,\n    /////////////////////////////\n    buttonStyle /* style object for button */,\n    buttonTextStyle /* style object for button text */,\n    renderCustomizedButtonChild /* function returns React component for customized button */,\n    /////////////////////////////\n    renderDropdownIcon,\n    dropdownIconPosition,\n    statusBarTranslucent,\n    dropdownStyle,\n    dropdownOverlayColor /* string */,\n    /////////////////////////////\n    rowStyle /* style object for row */,\n    rowTextStyle /* style object for row text */,\n    selectedRowStyle /* style object for selected row */,\n    selectedRowTextStyle /* style object for selected row text */,\n    renderCustomizedRowChild /* function returns React component for customized row */,\n    /////////////////////////////\n    search /* boolean */,\n    searchInputStyle /* style object for search input */,\n    searchInputTxtColor /* text color for search input */,\n    searchPlaceHolder /* placeholder text for search input */,\n    searchPlaceHolderColor /* text color for search input placeholder */,\n    renderSearchInputLeftIcon /* function returns React component for search input icon */,\n    renderSearchInputRightIcon /* function returns React component for search input icon */,\n  },\n  ref,\n) => {\n  ///////////////////////////////////////////////////////\n  useImperativeHandle(ref, () => ({\n    reset: () => {\n      reset();\n    },\n    openDropdown: () => {\n      openDropdown();\n    },\n    closeDropdown: () => {\n      closeDropdown();\n    },\n  }));\n  ///////////////////////////////////////////////////////\n  const DropdownButton = useRef(); // button ref to get positions\n  const [isVisible, setIsVisible] = useState(false); // dropdown visible ?\n  const [buttonLayout, setButtonLayout] = useState(null);\n  const [dropdownPX, setDropdownPX] = useState(0); // position x\n  const [dropdownPY, setDropdownPY] = useState(0); // position y\n  const [dropdownHEIGHT, setDropdownHEIGHT] = useState(() => {\n    return calculateDropdownHeight(dropdownStyle, rowStyle, data?.length || 0);\n  }); // dropdown height\n  const [dropdownWIDTH, setDropdownWIDTH] = useState(0); // dropdown width\n  ///////////////////////////////////////////////////////\n  const [selectedItem, setSelectedItem] = useState(null); // selected item from dropdown\n  const [selectedIndex, setSelectedIndex] = useState(-1); // index of selected item from dropdown\n  const dropDownFlatlistRef = useRef(null); // ref to the drop down flatlist\n  ///////////////////////////////////////////////////////\n  const [searchTxt, setSearchTxt] = useState('');\n  const keyboardHeight = useKeyboardHeight();\n  const remainigHeightAvoidKeyboard = height - keyboardHeight;\n  const safeDropdownViewUnderKeyboard = rowStyle && rowStyle.height ? rowStyle.height * 3 : 50 * 3;\n  /* ******************* useEffect ******************* */\n  // data array changes\n  useEffect(() => {\n    if (!data || data.length == 0) {\n      reset();\n    }\n  }, [data]);\n  // default value by index added or changed\n  useEffect(() => {\n    // defaultValueByIndex may be equals zero\n    if (isExist(defaultValueByIndex)) {\n      if (data && isExist(data[defaultValueByIndex])) {\n        setDefault(defaultValueByIndex);\n      }\n    }\n  }, [defaultValueByIndex]);\n  // default value added or changed\n  useEffect(() => {\n    // defaultValue may be equals zero\n    if (isExist(defaultValue)) {\n      if (data && findIndexInArr(defaultValue, data) >= 0) {\n        setDefault(findIndexInArr(defaultValue, data));\n      }\n    }\n  }, [defaultValue]);\n  // for height changes\n  useEffect(() => {\n    setDropdownHEIGHT(calculateDropdownHeight(dropdownStyle, rowStyle, data?.length || 0));\n  }, [dropdownStyle, rowStyle, data]);\n  ///////////////////////////////////////////////////////\n  /* ******************** Methods ******************** */\n  const openDropdown = () => {\n    DropdownButton.current.measure((fx, fy, w, h, px, py) => {\n      // console.log('position y => ', py, '\\nheight', h, '\\nposition x => ', px)\n      setButtonLayout({w, h, px, py});\n      if (height - 18 < py + h + dropdownHEIGHT) {\n        setDropdownPX(px);\n        setDropdownPY(py - 2 - dropdownHEIGHT);\n      } else {\n        setDropdownPX(px);\n        setDropdownPY(py + h + 2);\n      }\n      setDropdownWIDTH(dropdownStyle?.width || w);\n      setIsVisible(true);\n      onFocus && onFocus();\n    });\n  };\n  const closeDropdown = () => {\n    setIsVisible(false);\n    setSearchTxt('');\n    onBlur && onBlur();\n  };\n  const reset = () => {\n    setSelectedItem(null);\n    setSelectedIndex(-1);\n    setSearchTxt('');\n  };\n  const setDefault = index => {\n    setSelectedItem(data[index]);\n    setSelectedIndex(index);\n  };\n  const getItemLayout = (data, index) => ({\n    index,\n    length: data?.length || 0,\n    offset: rowStyle && rowStyle.height ? rowStyle.height * index : 50 * index,\n  });\n  const onLayout = () => {\n    if (disableAutoScroll) {\n      return;\n    }\n    if (selectedIndex >= 3 && dropDownFlatlistRef) {\n      dropDownFlatlistRef.current.scrollToOffset({\n        offset: rowStyle && rowStyle.height ? rowStyle.height * selectedIndex : 50 * selectedIndex,\n        animated: true,\n      });\n    }\n  };\n  const onSelectItem = (item, index) => {\n    closeDropdown();\n    onSelect(item, index);\n    setSelectedItem(item);\n    setSelectedIndex(index);\n  };\n  ///////////////////////////////////////////////////////\n  /* ******************** Render Methods ******************** */\n  const renderSearchView = () => {\n    return (\n      search && (\n        <View style={{...styles.searchViewStyle, ...{width: buttonLayout.w}}}>\n          <Input\n            value={searchTxt}\n            valueColor={searchInputTxtColor}\n            placeholder={searchPlaceHolder}\n            placeholderTextColor={searchPlaceHolderColor}\n            onChangeText={setSearchTxt}\n            inputStyle={searchInputStyle}\n            renderLeft={renderSearchInputLeftIcon}\n            renderRight={renderSearchInputRightIcon}\n          />\n        </View>\n      )\n    );\n  };\n  const renderFlatlistItem = ({item, index}) => {\n    return item ? (\n      <TouchableOpacity\n        activeOpacity={0.8}\n        style={{...styles.dropdownRow, ...rowStyle, ...(index == selectedIndex && selectedRowStyle)}}\n        onPress={() => onSelectItem(item, index)}>\n        {renderCustomizedRowChild ? (\n          <View style={styles.dropdownCustomizedRowParent}>{renderCustomizedRowChild(item, index)}</View>\n        ) : (\n          <Text\n            numberOfLines={1}\n            allowFontScaling={false}\n            style={{...styles.dropdownRowText, ...rowTextStyle, ...(index == selectedIndex && selectedRowTextStyle)}}>\n            {rowTextForSelection ? rowTextForSelection(item, index) : item.toString()}\n          </Text>\n        )}\n      </TouchableOpacity>\n    ) : (\n      <></>\n    );\n  };\n  const renderDropdown = () => {\n    return (\n      isVisible && (\n        <Modal\n          supportedOrientations={['portrait', 'landscape']}\n          animationType=\"none\"\n          transparent={true}\n          statusBarTranslucent={statusBarTranslucent || false}\n          visible={isVisible}>\n          <TouchableOpacity\n            activeOpacity={1}\n            onPress={() => closeDropdown()}\n            style={{\n              ...styles.dropdownOverlay,\n              ...(dropdownOverlayColor && {\n                backgroundColor: dropdownOverlayColor,\n              }),\n            }}\n          />\n          <View\n            style={{\n              ...styles.dropdownOverlayView,\n              ...styles.shadow,\n              ...dropdownStyle,\n              ...{\n                position: 'absolute',\n                top:\n                  remainigHeightAvoidKeyboard < dropdownPY + safeDropdownViewUnderKeyboard\n                    ? remainigHeightAvoidKeyboard - safeDropdownViewUnderKeyboard\n                    : dropdownPY,\n                height: dropdownHEIGHT,\n                width: dropdownWIDTH,\n                borderTopWidth: 0,\n                overflow: 'hidden',\n              },\n              ...(I18nManager.isRTL\n                ? {right: dropdownStyle?.right || dropdownPX}\n                : {left: dropdownStyle?.left || dropdownPX}),\n            }}>\n            {!data || data.length == 0 ? (\n              <View style={styles.dropdownActivityIndicatorView}>\n                <ActivityIndicator size=\"small\" color={'#999999'} />\n              </View>\n            ) : (\n              <FlatList\n                data={searchTxt ? deepSearchInArr(searchTxt, data) : data}\n                keyExtractor={(item, index) => index.toString()}\n                ref={ref => (dropDownFlatlistRef.current = ref)}\n                renderItem={renderFlatlistItem}\n                getItemLayout={getItemLayout}\n                onLayout={onLayout}\n                ListHeaderComponent={renderSearchView()}\n                stickyHeaderIndices={search && [0]}\n              />\n            )}\n          </View>\n        </Modal>\n      )\n    );\n  };\n  ///////////////////////////////////////////////////////\n  return (\n    <TouchableOpacity\n      ref={DropdownButton}\n      disabled={disabled}\n      activeOpacity={0.8}\n      style={{\n        ...styles.dropdownButton,\n        ...(dropdownIconPosition == 'left' ? {flexDirection: 'row'} : {flexDirection: 'row-reverse'}),\n        ...buttonStyle,\n      }}\n      onPress={openDropdown}>\n      {renderDropdown()}\n      {renderDropdownIcon && renderDropdownIcon(isVisible)}\n      {renderCustomizedButtonChild ? (\n        <View style={styles.dropdownCustomizedButtonParent}>\n          {renderCustomizedButtonChild(selectedItem, selectedIndex)}\n        </View>\n      ) : (\n        <Text numberOfLines={1} allowFontScaling={false} style={{...styles.dropdownButtonText, ...buttonTextStyle}}>\n          {isExist(selectedItem)\n            ? buttonTextAfterSelection\n              ? buttonTextAfterSelection(selectedItem, selectedIndex)\n              : selectedItem.toString()\n            : defaultButtonText || 'Select an option.'}\n        </Text>\n      )}\n    </TouchableOpacity>\n  );\n};\n\nexport default forwardRef((props, ref) => SelectDropdown(props, ref));\n"]},"metadata":{},"sourceType":"module"}
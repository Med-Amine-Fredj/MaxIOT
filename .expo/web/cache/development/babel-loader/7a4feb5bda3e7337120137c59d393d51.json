{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Network from 'expo-network';\nimport { NavigationContainer } from '@react-navigation/native';\nimport AppNavigator from \"./app/navigation/AppNavigator\";\nimport navigationTheme from \"./app/navigation/navigationTheme\";\nimport { defaultStore } from \"./app/store\";\nimport { Provider } from 'react-redux';\nimport { injectStore } from \"./app/store/storeInterceptor\";\nimport { PersistGate } from 'redux-persist/integration/react';\nimport colors from \"./app/config/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function App() {\n  var appStore = defaultStore;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      online = _useState2[0],\n      setOnline = _useState2[1];\n\n  var onlineFunction = function onlineFunction() {\n    var _await$Network$getNet, isConnected;\n\n    return _regeneratorRuntime.async(function onlineFunction$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Network.getNetworkStateAsync());\n\n          case 3:\n            _await$Network$getNet = _context.sent;\n            isConnected = _await$Network$getNet.isConnected;\n            setOnline(isConnected);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  useEffect(function () {\n    LogBox.ignoreLogs(['VirtualizedLists should never be nested']);\n    onlineFunction();\n\n    if (appStore) {\n      injectStore(appStore);\n    }\n\n    console.log('online', online);\n  }, [appStore, online]);\n  return _jsx(_Fragment, {\n    children: _jsx(Provider, {\n      store: appStore.store,\n      children: _jsx(PersistGate, {\n        loading: null,\n        persistor: appStore.persistor,\n        children: _jsxs(NavigationContainer, {\n          theme: navigationTheme,\n          children: [_jsx(AppNavigator, {}), !online && _jsx(View, {\n            style: {\n              backgroundColor: colors.light_red,\n              height: 10\n            }\n          })]\n        })\n      })\n    })\n  });\n}","map":{"version":3,"sources":["C:/Users/amine/OneDrive/Desktop/PFE/Examples/designTypes/App.js"],"names":["React","useEffect","useState","Network","NavigationContainer","AppNavigator","navigationTheme","defaultStore","Provider","injectStore","PersistGate","colors","App","appStore","online","setOnline","onlineFunction","getNetworkStateAsync","isConnected","console","log","LogBox","ignoreLogs","store","persistor","backgroundColor","light_red","height"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAGA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,YAAP;AACA,OAAOC,eAAP;AAEA,SAASC,YAAT;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,OAAOC,MAAP;;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,MAAMC,QAAQ,GAAGN,YAAjB;;AACA,kBAA4BL,QAAQ,EAApC;AAAA;AAAA,MAAOY,MAAP;AAAA,MAAeC,SAAf;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEWb,OAAO,CAACc,oBAAR,EAFX;;AAAA;AAAA;AAEXC,YAAAA,WAFW,yBAEXA,WAFW;AAGnBH,YAAAA,SAAS,CAACG,WAAD,CAAT;AAHmB;AAAA;;AAAA;AAAA;AAAA;AAKnBC,YAAAA,OAAO,CAACC,GAAR;;AALmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AASAnB,EAAAA,SAAS,CAAC,YAAM;AACdoB,IAAAA,MAAM,CAACC,UAAP,CAAkB,CAAC,yCAAD,CAAlB;AACAN,IAAAA,cAAc;;AACd,QAAIH,QAAJ,EAAc;AACZJ,MAAAA,WAAW,CAACI,QAAD,CAAX;AACD;;AACDM,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBN,MAAtB;AACD,GAPQ,EAON,CAACD,QAAD,EAAWC,MAAX,CAPM,CAAT;AASA,SACE;AAAA,cACE,KAAC,QAAD;AAAU,MAAA,KAAK,EAAED,QAAQ,CAACU,KAA1B;AAAA,gBACE,KAAC,WAAD;AAAa,QAAA,OAAO,EAAE,IAAtB;AAA4B,QAAA,SAAS,EAAEV,QAAQ,CAACW,SAAhD;AAAA,kBACE,MAAC,mBAAD;AAAqB,UAAA,KAAK,EAAElB,eAA5B;AAAA,qBACE,KAAC,YAAD,KADF,EAEG,CAACQ,MAAD,IACC,KAAC,IAAD;AACE,YAAA,KAAK,EAAE;AAAEW,cAAAA,eAAe,EAAEd,MAAM,CAACe,SAA1B;AAAqCC,cAAAA,MAAM,EAAE;AAA7C;AADT,YAHJ;AAAA;AADF;AADF;AADF,IADF;AAgBD","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { LogBox, View } from 'react-native';\nimport * as Network from 'expo-network';\nimport { NavigationContainer } from '@react-navigation/native';\nimport AppNavigator from './app/navigation/AppNavigator';\nimport navigationTheme from './app/navigation/navigationTheme';\n\nimport { defaultStore } from './app/store';\nimport { Provider } from 'react-redux';\nimport { injectStore } from './app/store/storeInterceptor';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport colors from './app/config/colors';\n\nexport default function App() {\n  const appStore = defaultStore;\n  const [online, setOnline] = useState();\n  const onlineFunction = async () => {\n    try {\n      const { isConnected } = await Network.getNetworkStateAsync();\n      setOnline(isConnected);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    LogBox.ignoreLogs(['VirtualizedLists should never be nested']);\n    onlineFunction();\n    if (appStore) {\n      injectStore(appStore);\n    }\n    console.log('online', online);\n  }, [appStore, online]);\n\n  return (\n    <>\n      <Provider store={appStore.store}>\n        <PersistGate loading={null} persistor={appStore.persistor}>\n          <NavigationContainer theme={navigationTheme}>\n            <AppNavigator />\n            {!online && (\n              <View\n                style={{ backgroundColor: colors.light_red, height: 10 }}\n              ></View>\n            )}\n          </NavigationContainer>\n        </PersistGate>\n      </Provider>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
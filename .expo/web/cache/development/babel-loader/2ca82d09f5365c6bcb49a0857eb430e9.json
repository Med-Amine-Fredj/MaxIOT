{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport NoDataFound from \"../NoDataFound\";\nimport { BarChart } from 'react-native-chart-kit';\nvar screenWidth = Dimensions.get('window').width;\nvar screenHeigth = Dimensions.get('window').height;\nimport colors from \"../../config/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function MultiBarChart(_ref) {\n  var size = _ref.size,\n      values = _ref.values,\n      color = _ref.color;\n  var dataSliced = values.slice(1);\n  var finalData = dataSliced.length > 12 && size === 'large' ? dataSliced.slice(-12) : dataSliced.length > 10 && size !== 'large' ? dataSliced.slice(-10) : dataSliced;\n  var data = {\n    datasets: [{\n      data: finalData\n    }]\n  };\n  var chartConfig = {\n    backgroundGradientFrom: colors.white,\n    backgroundGradientTo: colors.white,\n    color: function color() {\n      return colors.primary;\n    },\n    barPercentage: size === 'large' ? 0.7 : 0.8,\n    propsForBackgroundLines: {\n      strokeOpacity: size === 'large' ? 0.1 : 0,\n      strokeDasharray: [-1000000000000, 1000000000000000]\n    },\n    decimalPlaces: 0,\n    labelColor: function labelColor() {\n      return \"black\";\n    },\n    propsForLabels: {\n      fontSize: size == 'large' ? 9 : 0,\n      fontWeight: 'bold'\n    }\n  };\n  return values[0] === 0 && values.length === 1 ? _jsx(View, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(NoDataFound, {\n      visible: true\n    })\n  }) : _jsx(View, {\n    style: styles.container,\n    children: _jsx(BarChart, {\n      style: {\n        padding: size === 'large' ? 10 : 9,\n        alignSelf: 'flex-end',\n        justifyContent: 'center'\n      },\n      data: data,\n      width: size === 'large' ? screenWidth * 1.1 : screenWidth * 1.12,\n      height: size === 'large' ? screenHeigth * 0.3 : screenHeigth * 0.25,\n      chartConfig: chartConfig,\n      showValuesOnTopOfBars: true,\n      fromZero: size === 'large' ? true : false\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.white\n  }\n});","map":{"version":3,"sources":["C:/Users/amine/OneDrive/Desktop/PFE/Examples/designTypes/app/components/charts/MultiBarChart.js"],"names":["NoDataFound","BarChart","screenWidth","Dimensions","get","width","screenHeigth","height","colors","MultiBarChart","size","values","color","dataSliced","slice","finalData","length","data","datasets","chartConfig","backgroundGradientFrom","white","backgroundGradientTo","primary","barPercentage","propsForBackgroundLines","strokeOpacity","strokeDasharray","decimalPlaces","labelColor","propsForLabels","fontSize","fontWeight","flex","styles","container","padding","alignSelf","justifyContent","StyleSheet","create","backgroundColor"],"mappings":"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","sourcesContent":["import { StyleSheet } from 'react-native';\r\nimport { Dimensions, View, Text } from 'react-native';\r\nimport NoDataFound from '../NoDataFound';\r\n\r\nimport { BarChart } from 'react-native-chart-kit';\r\n\r\nlet screenWidth = Dimensions.get('window').width;\r\nlet screenHeigth = Dimensions.get('window').height;\r\n\r\nimport colors from '../../config/colors';\r\n\r\nexport default function MultiBarChart({ size, values, color }) {\r\n  const dataSliced = values.slice(1);\r\n  const finalData =\r\n    dataSliced.length > 12 && size === 'large'\r\n      ? dataSliced.slice(-12)\r\n      : dataSliced.length > 10 && size !== 'large'\r\n      ? dataSliced.slice(-10)\r\n      : dataSliced;\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: finalData,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const chartConfig = {\r\n    backgroundGradientFrom: colors.white,\r\n    backgroundGradientTo: colors.white,\r\n    color: () => colors.primary,\r\n    barPercentage: size === 'large' ? 0.7 : 0.8,\r\n    propsForBackgroundLines: {\r\n      strokeOpacity: size === 'large' ? 0.1 : 0,\r\n      strokeDasharray: [-1000000000000, 1000000000000000],\r\n    },\r\n    decimalPlaces: 0,\r\n    labelColor: () => `black`,\r\n    propsForLabels: {\r\n      fontSize: size == 'large' ? 9 : 0,\r\n      fontWeight: 'bold',\r\n    },\r\n  };\r\n  return values[0] === 0 && values.length === 1 ? (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n      }}\r\n    >\r\n      <NoDataFound visible={true} />\r\n    </View>\r\n  ) : (\r\n    <View style={styles.container}>\r\n      <BarChart\r\n        style={{\r\n          padding: size === 'large' ? 10 : 9,\r\n          alignSelf: 'flex-end',\r\n          justifyContent: 'center',\r\n        }}\r\n        data={data}\r\n        width={size === 'large' ? screenWidth * 1.1 : screenWidth * 1.12}\r\n        height={size === 'large' ? screenHeigth * 0.3 : screenHeigth * 0.25}\r\n        chartConfig={chartConfig}\r\n        showValuesOnTopOfBars={true}\r\n        fromZero={size === 'large' ? true : false}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: colors.white,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}
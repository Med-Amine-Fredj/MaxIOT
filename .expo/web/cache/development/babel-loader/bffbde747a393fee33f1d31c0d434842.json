{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { LineChart } from 'react-native-chart-kit';\nimport NoDataFound from \"../NoDataFound\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar screenWidth = Dimensions.get('window').width;\nvar screenHeigth = Dimensions.get('window').height;\nexport default function SimpleLineChart(_ref) {\n  var _data$datasets$, _data$datasets$2, _data$datasets$2$data;\n\n  var dataArray = _ref.dataArray,\n      size = _ref.size;\n  var data = {\n    datasets: [{\n      data: size === 'large' && (dataArray == null ? void 0 : dataArray.length) > 24 ? dataArray.slice(-24) : size === 'large' && (dataArray == null ? void 0 : dataArray.length) <= 24 ? dataArray : size === 'small' && (dataArray == null ? void 0 : dataArray.length) > 6 ? dataArray.slice(-6) : size === 'small' && (dataArray == null ? void 0 : dataArray.length) <= 6 && dataArray\n    }]\n  };\n  var chartConfig = {\n    backgroundGradientFrom: 'white',\n    backgroundGradientTo: 'white',\n    fillShadowGradientFrom: '#00BFBF',\n    fillShadowGradientToOpacity: 0.1,\n    fillShadowGradientTo: 'white',\n    strokeWidth: 4,\n    decimalPlaces: 2,\n    color: function color() {\n      return '#00BFBF';\n    },\n    labelColor: function labelColor() {\n      return '#018E8E';\n    },\n    propsForDots: {\n      r: '2',\n      strokeWidth: '2',\n      stroke: '#018E8E'\n    },\n    propsForBackgroundLines: {\n      stroke: 'gray',\n      screenWidth: '0',\n      strokeOpacity: 0.2,\n      strokeDasharray: [-1000000000000, 10000000000000000]\n    }\n  };\n  return dataArray[0] === 0 && (dataArray == null ? void 0 : dataArray.length) === 1 ? _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center'\n    },\n    children: _jsx(NoDataFound, {\n      visible: true\n    })\n  }) : _jsx(_Fragment, {\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [size == 'small' && _jsx(Text, {\n        style: styles.txt,\n        children: data == null ? void 0 : (_data$datasets$ = data.datasets[0]) == null ? void 0 : _data$datasets$.data[(data == null ? void 0 : (_data$datasets$2 = data.datasets[0]) == null ? void 0 : (_data$datasets$2$data = _data$datasets$2.data) == null ? void 0 : _data$datasets$2$data.length) - 1]\n      }), _jsx(LineChart, {\n        data: data,\n        width: size == 'large' ? screenWidth : screenWidth * 0.78,\n        height: size == 'large' ? screenHeigth * 0.3 : screenHeigth * 0.18,\n        withOuterLines: size == 'large' ? true : false,\n        withInnerLines: size == 'large' ? true : false,\n        withVerticalLines: size == 'large' ? true : false,\n        withVerticalLabels: size == 'large' ? true : false,\n        withHorizontalLabels: size == 'large' ? true : false,\n        chartConfig: chartConfig,\n        fromZero: true,\n        withDots: size == 'large' ? true : false,\n        segments: 4\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  txt: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: '#00BFBF'\n  }\n});","map":{"version":3,"sources":["C:/Users/amine/OneDrive/Desktop/PFE/Examples/designTypes/app/components/charts/SimpleLineChart.js"],"names":["LineChart","NoDataFound","screenWidth","Dimensions","get","width","screenHeigth","height","SimpleLineChart","dataArray","size","data","datasets","length","slice","chartConfig","backgroundGradientFrom","backgroundGradientTo","fillShadowGradientFrom","fillShadowGradientToOpacity","fillShadowGradientTo","strokeWidth","decimalPlaces","color","labelColor","propsForDots","r","stroke","propsForBackgroundLines","strokeOpacity","strokeDasharray","flex","justifyContent","styles","container","txt","StyleSheet","create","backgroundColor","alignItems","fontSize","fontWeight","textAlign"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, View, Dimensions } from 'react-native';\r\n\r\nimport { LineChart } from 'react-native-chart-kit';\r\nimport NoDataFound from '../NoDataFound';\r\n\r\nlet screenWidth = Dimensions.get('window').width;\r\nlet screenHeigth = Dimensions.get('window').height;\r\n\r\nexport default function SimpleLineChart({ dataArray, size }) {\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data:\r\n          size === 'large' && dataArray?.length > 24\r\n            ? dataArray.slice(-24)\r\n            : size === 'large' && dataArray?.length <= 24\r\n            ? dataArray\r\n            : size === 'small' && dataArray?.length > 6\r\n            ? dataArray.slice(-6)\r\n            : size === 'small' && dataArray?.length <= 6 && dataArray,\r\n      },\r\n    ],\r\n  };\r\n  const chartConfig = {\r\n    backgroundGradientFrom: 'white',\r\n    backgroundGradientTo: 'white',\r\n    fillShadowGradientFrom: '#00BFBF',\r\n    fillShadowGradientToOpacity: 0.1,\r\n    fillShadowGradientTo: 'white',\r\n    strokeWidth: 4,\r\n    decimalPlaces: 2,\r\n    color: () => '#00BFBF',\r\n    labelColor: () => '#018E8E',\r\n    propsForDots: {\r\n      r: '2',\r\n      strokeWidth: '2',\r\n      stroke: '#018E8E',\r\n    },\r\n    propsForBackgroundLines: {\r\n      stroke: 'gray',\r\n      screenWidth: '0',\r\n      strokeOpacity: 0.2,\r\n      strokeDasharray: [-1000000000000, 10000000000000000],\r\n    },\r\n  };\r\n  return dataArray[0] === 0 && dataArray?.length === 1 ? (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n      }}\r\n    >\r\n      <NoDataFound visible={true} />\r\n    </View>\r\n  ) : (\r\n    <>\r\n      <View style={styles.container}>\r\n        {size == 'small' && (\r\n          <Text style={styles.txt}>\r\n            {data?.datasets[0]?.data[data?.datasets[0]?.data?.length - 1]}\r\n          </Text>\r\n        )}\r\n        <LineChart\r\n          data={data}\r\n          width={size == 'large' ? screenWidth : screenWidth * 0.78}\r\n          height={size == 'large' ? screenHeigth * 0.3 : screenHeigth * 0.18}\r\n          withOuterLines={size == 'large' ? true : false}\r\n          withInnerLines={size == 'large' ? true : false}\r\n          withVerticalLines={size == 'large' ? true : false}\r\n          withVerticalLabels={size == 'large' ? true : false}\r\n          withHorizontalLabels={size == 'large' ? true : false}\r\n          chartConfig={chartConfig}\r\n          fromZero={true}\r\n          withDots={size == 'large' ? true : false}\r\n          segments={4}\r\n        />\r\n      </View>\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  txt: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    color: '#00BFBF',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}
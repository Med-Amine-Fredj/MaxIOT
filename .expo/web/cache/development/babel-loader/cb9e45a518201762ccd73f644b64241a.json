{"ast":null,"code":"import React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { AnimatedCircularProgress } from 'react-native-circular-progress';\nimport { AntDesign } from '@expo/vector-icons';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport colors from \"../../config/colors\";\nimport NoDataFound from \"../NoDataFound\";\nimport { schedulePushNotification } from \"../../../Helpers/notification\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function CircleGauge(_ref) {\n  var value = _ref.value,\n      min = _ref.min,\n      max = _ref.max,\n      warning = _ref.warning,\n      size = _ref.size;\n  var levelStyle = StyleSheet.flatten([styles.txt, {\n    fontSize: size == 'large' ? 50 : 35,\n    color: value <= min || value >= max ? colors.dark_red : value == warning ? colors.dark_warning : colors.light_green\n  }]);\n  var messageStyle = StyleSheet.flatten([styles.message, {\n    color: value <= min || value >= max ? colors.dark_red : value == warning ? colors.dark_warning : colors.light_green\n  }]);\n  var percentStyle = StyleSheet.flatten([styles.percent, {\n    color: value <= min || value >= max ? colors.dark_red : value == warning ? colors.dark_warning : colors.light_green\n  }]);\n  return _jsx(_Fragment, {\n    children: value === 0 ? _jsx(View, {\n      style: {\n        flex: 1\n      },\n      children: _jsx(NoDataFound, {\n        visible: true\n      })\n    }) : _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: {\n          minHeight: '10%'\n        },\n        children: [value == warning && _jsxs(View, {\n          style: styles.messageContainer,\n          children: [_jsx(AntDesign, {\n            name: \"warning\",\n            size: size == 'large' ? 30 : 25,\n            color: colors.dark_warning\n          }), size == 'large' && _jsx(Text, {\n            style: messageStyle,\n            children: \"Warning\"\n          })]\n        }), (value >= max || value <= min) && _jsxs(View, {\n          style: styles.messageContainer,\n          children: [_jsx(MaterialIcons, {\n            name: \"error-outline\",\n            size: size == 'large' ? 30 : 25,\n            color: colors.dark_red\n          }), size == 'large' && _jsx(Text, {\n            style: messageStyle,\n            children: \"Error\"\n          })]\n        })]\n      }), _jsx(View, {\n        style: {\n          alignSelf: 'center'\n        },\n        children: _jsx(AnimatedCircularProgress, {\n          size: size == 'large' ? 180 : 110,\n          width: 6,\n          fill: Math.abs(value),\n          backgroundWidth: 1,\n          tintColor: value <= min || value >= max ? colors.light_red : value == warning ? colors.dark_warning : colors.light_green,\n          tintTransparency: false,\n          backgroundColor: value <= min || value >= max ? '#FFDCDC' : value == warning ? '#FFF0D7' : '#EBFFFF',\n          lineCap: \"round\",\n          duration: 1000,\n          rotation: value < 0 ? 360 * value / 100 : 0,\n          childrenContainerStyle: {\n            shadowColor: value <= min || value >= max ? colors.dark_red : value == warning ? colors.dark_warning : colors.light_green,\n            shadowOpacity: 0.4,\n            shadowRadius: 10,\n            elevation: 20,\n            backgroundColor: 'white'\n          },\n          children: function children(fill) {\n            return _jsx(_Fragment, {\n              children: _jsxs(View, {\n                style: styles.valueContainer,\n                children: [_jsx(Text, {\n                  style: levelStyle,\n                  children: Math.round(value)\n                }), _jsx(Text, {\n                  style: percentStyle,\n                  children: \"%\"\n                })]\n              })\n            });\n          }\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.white\n  },\n  valueContainer: {\n    flexDirection: 'row',\n    alignContent: 'center',\n    justifyContent: 'center'\n  },\n  txt: {\n    fontSize: 34,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  messageContainer: {\n    flexDirection: 'row',\n    alignSelf: 'flex-end',\n    marginRight: '5%'\n  },\n  message: {\n    fontSize: 14,\n    marginTop: 3,\n    marginLeft: 3\n  },\n  percent: {\n    textAlign: 'center',\n    fontSize: 22,\n    fontWeight: 'bold',\n    marginTop: '10%'\n  }\n});","map":{"version":3,"sources":["C:/Users/amine/OneDrive/Desktop/PFE/Examples/designTypes/app/components/charts/CircleGauge.js"],"names":["React","AnimatedCircularProgress","AntDesign","MaterialIcons","colors","NoDataFound","schedulePushNotification","CircleGauge","value","min","max","warning","size","levelStyle","StyleSheet","flatten","styles","txt","fontSize","color","dark_red","dark_warning","light_green","messageStyle","message","percentStyle","percent","flex","container","minHeight","messageContainer","alignSelf","Math","abs","light_red","shadowColor","shadowOpacity","shadowRadius","elevation","backgroundColor","fill","valueContainer","round","create","white","flexDirection","alignContent","justifyContent","fontWeight","textAlign","marginRight","marginTop","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport { StyleSheet, Text, View } from 'react-native';\r\n\r\nimport { AnimatedCircularProgress } from 'react-native-circular-progress';\r\n\r\nimport { AntDesign } from '@expo/vector-icons';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\n\r\nimport colors from '../../config/colors';\r\nimport NoDataFound from '../NoDataFound';\r\nimport { schedulePushNotification } from '../../../Helpers/notification';\r\n\r\nexport default function CircleGauge({ value, min, max, warning, size }) {\r\n  var levelStyle = StyleSheet.flatten([\r\n    styles.txt,\r\n    {\r\n      fontSize: size == 'large' ? 50 : 35,\r\n      color:\r\n        value <= min || value >= max\r\n          ? colors.dark_red\r\n          : value == warning\r\n          ? colors.dark_warning\r\n          : colors.light_green,\r\n    },\r\n  ]);\r\n\r\n  var messageStyle = StyleSheet.flatten([\r\n    styles.message,\r\n    {\r\n      color:\r\n        value <= min || value >= max\r\n          ? colors.dark_red\r\n          : value == warning\r\n          ? colors.dark_warning\r\n          : colors.light_green,\r\n    },\r\n  ]);\r\n\r\n  var percentStyle = StyleSheet.flatten([\r\n    styles.percent,\r\n    {\r\n      color:\r\n        value <= min || value >= max\r\n          ? colors.dark_red\r\n          : value == warning\r\n          ? colors.dark_warning\r\n          : colors.light_green,\r\n    },\r\n  ]);\r\n\r\n  // const sendNotif = async (title, body) => {\r\n  //   await schedulePushNotification(title, body);\r\n  // };\r\n  // if (value == warning) {\r\n  //   sendNotif('Warning at the circle gauge', 'value is now in warning zone');\r\n  // } else if (value <= min) {\r\n  //   sendNotif('Warning at the circle gauge', 'value is below the minimum');\r\n  // } else if (value >= max) {\r\n  //   sendNotif('Warning at the circle gauge', 'value is over the maximum');\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      {value === 0 ? (\r\n        <View style={{ flex: 1 }}>\r\n          <NoDataFound visible={true} />\r\n        </View>\r\n      ) : (\r\n        <View style={styles.container}>\r\n          <View style={{ minHeight: '10%' }}>\r\n            {value == warning && (\r\n              <View style={styles.messageContainer}>\r\n                <AntDesign\r\n                  name=\"warning\"\r\n                  size={size == 'large' ? 30 : 25}\r\n                  color={colors.dark_warning}\r\n                />\r\n                {size == 'large' && <Text style={messageStyle}>Warning</Text>}\r\n              </View>\r\n            )}\r\n            {(value >= max || value <= min) && (\r\n              <View style={styles.messageContainer}>\r\n                <MaterialIcons\r\n                  name=\"error-outline\"\r\n                  size={size == 'large' ? 30 : 25}\r\n                  color={colors.dark_red}\r\n                />\r\n                {size == 'large' && <Text style={messageStyle}>Error</Text>}\r\n              </View>\r\n            )}\r\n          </View>\r\n          <View style={{ alignSelf: 'center' }}>\r\n            <AnimatedCircularProgress\r\n              size={size == 'large' ? 180 : 110}\r\n              width={6}\r\n              fill={Math.abs(value)}\r\n              backgroundWidth={1}\r\n              tintColor={\r\n                value <= min || value >= max\r\n                  ? colors.light_red\r\n                  : value == warning\r\n                  ? colors.dark_warning\r\n                  : colors.light_green\r\n              }\r\n              tintTransparency={false}\r\n              backgroundColor={\r\n                value <= min || value >= max\r\n                  ? '#FFDCDC'\r\n                  : value == warning\r\n                  ? '#FFF0D7'\r\n                  : '#EBFFFF'\r\n              }\r\n              lineCap=\"round\"\r\n              duration={1000}\r\n              rotation={value < 0 ? (360 * value) / 100 : 0}\r\n              childrenContainerStyle={{\r\n                shadowColor:\r\n                  value <= min || value >= max\r\n                    ? colors.dark_red\r\n                    : value == warning\r\n                    ? colors.dark_warning\r\n                    : colors.light_green,\r\n                shadowOpacity: 0.4,\r\n                shadowRadius: 10,\r\n                elevation: 20,\r\n                backgroundColor: 'white',\r\n              }}\r\n            >\r\n              {(fill) => (\r\n                <>\r\n                  <View style={styles.valueContainer}>\r\n                    <Text style={levelStyle}>{Math.round(value)}</Text>\r\n                    <Text style={percentStyle}>%</Text>\r\n                  </View>\r\n                </>\r\n              )}\r\n            </AnimatedCircularProgress>\r\n          </View>\r\n        </View>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: colors.white,\r\n  },\r\n  valueContainer: {\r\n    flexDirection: 'row',\r\n    alignContent: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  txt: {\r\n    fontSize: 34,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  messageContainer: {\r\n    flexDirection: 'row',\r\n    alignSelf: 'flex-end',\r\n    marginRight: '5%',\r\n  },\r\n  message: {\r\n    fontSize: 14,\r\n    marginTop: 3,\r\n    marginLeft: 3,\r\n  },\r\n  percent: {\r\n    textAlign: 'center',\r\n    fontSize: 22,\r\n    fontWeight: 'bold',\r\n    marginTop: '10%',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { API_URL } from \"../../config/dotEnvFile\";\nimport { GET_DEVICES_DATA_REQUEST, GET_DEVICES_DATA_SUCCESS, GET_DEVICES_DATA_FAIL, UPDATE_DEVICES_DATA_REQUEST, UPDATE_DEVICES_DATA_SUCCESS, UPDATE_DEVICES_DATA_FAIL } from \"../slices/reducers/devicesData\";\nexport var getDevicesData = function getDevicesData(store) {\n  return _regeneratorRuntime.async(function getDevicesData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          try {\n            store.dispatch({\n              type: GET_DEVICES_DATA_REQUEST\n            });\n            axios.get(API_URL + \"/sensors/\").then(function (response) {\n              store.dispatch({\n                type: GET_DEVICES_DATA_SUCCESS,\n                payload: {\n                  data: response.data\n                }\n              });\n            });\n          } catch (error) {\n            store.dispatch({\n              type: GET_DEVICES_DATA_FAIL,\n              payload: error\n            });\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var updateDevicesData = function updateDevicesData(store, id, value) {\n  try {\n    var _store$getState$entit, _store$getState$entit2;\n\n    store.dispatch({\n      type: UPDATE_DEVICES_DATA_REQUEST\n    });\n    var deviceData = (_store$getState$entit = store.getState().entities) == null ? void 0 : (_store$getState$entit2 = _store$getState$entit.devicesData) == null ? void 0 : _store$getState$entit2.devicesData;\n    var deviceById = deviceData.filter(function (item) {\n      return item._id === id.toString();\n    })[0];\n\n    var deviceByIdModified = _objectSpread(_objectSpread({}, deviceById), {}, {\n      values: [].concat(_toConsumableArray(deviceById == null ? void 0 : deviceById.values), [value])\n    });\n\n    var devices = deviceData == null ? void 0 : deviceData.filter(function (item) {\n      return item._id !== id;\n    });\n    store.dispatch({\n      type: UPDATE_DEVICES_DATA_SUCCESS,\n      payload: {\n        data: [].concat(_toConsumableArray(devices), [deviceByIdModified])\n      }\n    });\n  } catch (error) {\n    store.dispatch({\n      type: UPDATE_DEVICES_DATA_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/amine/OneDrive/Desktop/PFE/Examples/designTypes/app/store/actions/devicesDataActions.js"],"names":["axios","API_URL","GET_DEVICES_DATA_REQUEST","GET_DEVICES_DATA_SUCCESS","GET_DEVICES_DATA_FAIL","UPDATE_DEVICES_DATA_REQUEST","UPDATE_DEVICES_DATA_SUCCESS","UPDATE_DEVICES_DATA_FAIL","getDevicesData","store","dispatch","type","get","then","response","payload","data","error","updateDevicesData","id","value","deviceData","getState","entities","devicesData","deviceById","filter","item","_id","toString","deviceByIdModified","values","devices"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT;AAEA,SACEC,wBADF,EAEEC,wBAFF,EAGEC,qBAHF,EAIEC,2BAJF,EAKEC,2BALF,EAMEC,wBANF;AASA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAC5B,cAAI;AACFA,YAAAA,KAAK,CAACC,QAAN,CAAe;AACbC,cAAAA,IAAI,EAAET;AADO,aAAf;AAIAF,YAAAA,KAAK,CAACY,GAAN,CAAaX,OAAb,gBAAiCY,IAAjC,CAAsC,UAACC,QAAD,EAAc;AAClDL,cAAAA,KAAK,CAACC,QAAN,CAAe;AACbC,gBAAAA,IAAI,EAAER,wBADO;AAEbY,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,IAAI,EAAEF,QAAQ,CAACE;AAAjB;AAFI,eAAf;AAID,aALD;AAMD,WAXD,CAWE,OAAOC,KAAP,EAAc;AACdR,YAAAA,KAAK,CAACC,QAAN,CAAe;AACbC,cAAAA,IAAI,EAAEP,qBADO;AAEbW,cAAAA,OAAO,EAAEE;AAFI,aAAf;AAID;;AAjB2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;AAoBP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACT,KAAD,EAAQU,EAAR,EAAYC,KAAZ,EAAsB;AACrD,MAAI;AAAA;;AACFX,IAAAA,KAAK,CAACC,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAEN;AADO,KAAf;AAGA,QAAMgB,UAAU,4BAAGZ,KAAK,CAACa,QAAN,GAAiBC,QAApB,+CAAG,sBAA2BC,WAA9B,qBAAG,uBAAwCA,WAA3D;AACA,QAAMC,UAAU,GAAGJ,UAAU,CAACK,MAAX,CACjB,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACC,GAAL,KAAaT,EAAE,CAACU,QAAH,EAAvB;AAAA,KADiB,EAEjB,CAFiB,CAAnB;;AAGA,QAAMC,kBAAkB,mCACnBL,UADmB;AAEtBM,MAAAA,MAAM,+BAAMN,UAAN,oBAAMA,UAAU,CAAEM,MAAlB,IAA0BX,KAA1B;AAFgB,MAAxB;;AAKA,QAAMY,OAAO,GAAGX,UAAH,oBAAGA,UAAU,CAAEK,MAAZ,CAAmB,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACC,GAAL,KAAaT,EAAvB;AAAA,KAAnB,CAAhB;AACAV,IAAAA,KAAK,CAACC,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAEL,2BADO;AAEbS,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,+BAAMgB,OAAN,IAAeF,kBAAf;AAAN;AAFI,KAAf;AAID,GAlBD,CAkBE,OAAOb,KAAP,EAAc;AACdR,IAAAA,KAAK,CAACC,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAEJ,wBADO;AAEbQ,MAAAA,OAAO,EAAEE;AAFI,KAAf;AAID;AACF,CAzBM","sourcesContent":["import axios from 'axios';\r\nimport { API_URL } from '../../config/dotEnvFile';\r\n\r\nimport {\r\n  GET_DEVICES_DATA_REQUEST,\r\n  GET_DEVICES_DATA_SUCCESS,\r\n  GET_DEVICES_DATA_FAIL,\r\n  UPDATE_DEVICES_DATA_REQUEST,\r\n  UPDATE_DEVICES_DATA_SUCCESS,\r\n  UPDATE_DEVICES_DATA_FAIL,\r\n} from '../slices/reducers/devicesData';\r\n\r\nexport const getDevicesData = async (store) => {\r\n  try {\r\n    store.dispatch({\r\n      type: GET_DEVICES_DATA_REQUEST,\r\n    });\r\n\r\n    axios.get(`${API_URL}/sensors/`).then((response) => {\r\n      store.dispatch({\r\n        type: GET_DEVICES_DATA_SUCCESS,\r\n        payload: { data: response.data },\r\n      });\r\n    });\r\n  } catch (error) {\r\n    store.dispatch({\r\n      type: GET_DEVICES_DATA_FAIL,\r\n      payload: error,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateDevicesData = (store, id, value) => {\r\n  try {\r\n    store.dispatch({\r\n      type: UPDATE_DEVICES_DATA_REQUEST,\r\n    });\r\n    const deviceData = store.getState().entities?.devicesData?.devicesData;\r\n    const deviceById = deviceData.filter(\r\n      (item) => item._id === id.toString()\r\n    )[0];\r\n    const deviceByIdModified = {\r\n      ...deviceById,\r\n      values: [...deviceById?.values, value],\r\n    };\r\n\r\n    const devices = deviceData?.filter((item) => item._id !== id);\r\n    store.dispatch({\r\n      type: UPDATE_DEVICES_DATA_SUCCESS,\r\n      payload: { data: [...devices, deviceByIdModified] },\r\n    });\r\n  } catch (error) {\r\n    store.dispatch({\r\n      type: UPDATE_DEVICES_DATA_FAIL,\r\n      payload: error,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}